{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://projetjs/./js/Class/Modal.js","webpack://projetjs/./js/Class/Validator.js","webpack://projetjs/./js/formConfig.js","webpack://projetjs/./js/index.js","webpack://projetjs/./js/nav.js"],"sourcesContent":["export default class Modal {\n  // DOM Elements\n  static dom = {\n    modalbg: document.querySelector(\".bground\"),\n    modalBtn: document.querySelectorAll(\".modal-btn\"),\n    closeBtn: document.querySelector(\".close\"),\n    closeConfirm: document.querySelector(\".close-confirm\"),\n    modalConfirm: document.querySelector(\".confirm-modal\"),\n    form: document.getElementsByName(\"reserve\")[0],\n  };\n\n  // launch modal event, add listener for open the modal and close them with the close button or X button\n  static launchModalEvent = () => {\n    this.dom.modalBtn.forEach((btn) =>\n      btn.addEventListener(\"click\", this.launchModal)\n    );\n\n    this.dom.closeBtn.addEventListener(\"click\", this.closeModal);\n    this.dom.closeBtn.addEventListener(\"click\", this.closeConfirm);\n    this.dom.closeConfirm.addEventListener(\"click\", this.closeConfirm);\n  };\n\n  // launch modal form, display the modal with css property display block\n  static launchModal = () => (this.dom.modalbg.style.display = \"block\");\n\n  // Close modal, hide the modal with css property display none\n  static closeModal = () => (this.dom.modalbg.style.display = \"none\");\n\n  //Close confirm modal, reset the display of the modal\n  static closeConfirm = () => {\n    this.closeModal();\n    this.dom.form.style.display = \"block\";\n    this.dom.modalConfirm.style.display = \"none\";\n    this.dom.modalConfirm.classList.remove(\"confirm-message\");\n  };\n\n  // Show message validation and hide form\n  static validation = () => {\n    this.dom.form.style.display = \"none\";\n    this.dom.modalConfirm.style.display = \"block\";\n    this.dom.modalConfirm.classList.add(\"confirm-message\");\n  };\n}\n","export default class Validator {\n  #formValid = true;\n\n  constructor(fieldContainer, formFields) {\n    this.fieldContainer = fieldContainer;\n    this.formFields = formFields;\n  }\n\n  getFormValid = () => this.#formValid;\n\n  setFormValid = (state) => (this.#formValid = state);\n\n  // Methods for validation types\n  nameValidation = (name) => /^([A-ZÀ-Ÿa-z-']{2,20})$/.test(name.value);\n\n  //lastNameValidation = (last) => /^([A-ZÀ-Ÿa-z-']{2,20})$/.test(last.value);\n  // ajouter regexp pour nom uniquement en lettre\n\n  emailValidation = (email) =>\n    /^([a-z0-9_\\.-]+\\@[\\da-z\\.-]+\\.[a-z\\.]{2,6})$/.test(email.value);\n\n  numberValidation = (number) => /^[0-9]+$/.test(number.value);\n\n  radioValidation = (radio) => {\n    for (let element of radio) if (element.checked) return true;\n  };\n\n  checkboxValidation = (checkbox) => checkbox.checked;\n\n  dateValidation = (date) => (date.value != \"\" ? true : false);\n  // ajouter regexp pour vérifier la date de naissance\n\n  // Reset errors fields style and set the default value for private property #formValid\n  resetValidation = () => {\n    this.setFormValid(true);\n    Array.from(this.fieldContainer).map((field) => {\n      field.dataset.errorVisible = false;\n    });\n  };\n\n  // Add css style for invalid input entry and show message\n  invalidInputStyle = (input, invalidMessage) => {\n    input.parentNode.setAttribute(\"data-error-visible\", true);\n    input.parentNode.setAttribute(\"data-error\", invalidMessage);\n  };\n\n  // Check input validity for each element in formFields attribute\n  launchValidation = () => {\n    // reset form validation\n    this.resetValidation();\n\n    for (const field in this.formFields) {\n      switch (this.formFields[field].validationType) {\n        case \"name\":\n          if (!this.nameValidation(this.formFields[field].element)) {\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n            this.setFormValid(false);\n          }\n          break;\n        case \"last\":\n          if (!this.lastNameValidation(this.formFields[field].element)) {\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n            this.setFormValid(false);\n          }\n          break;\n\n        case \"email\":\n          if (!this.emailValidation(this.formFields[field].element)) {\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n            this.setFormValid(false);\n          }\n          break;\n\n        case \"number\":\n          if (!this.numberValidation(this.formFields[field].element)) {\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n            this.setFormValid(false);\n          }\n          break;\n\n        case \"radio\":\n          if (!this.radioValidation(this.formFields[field].element)) {\n            this.invalidInputStyle(\n              this.formFields[field].element[0],\n              this.formFields[field].invalidMessage\n            );\n            this.setFormValid(false);\n          }\n          break;\n\n        case \"checkbox\":\n          if (!this.checkboxValidation(this.formFields[field].element)) {\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n            this.setFormValid(false);\n          }\n          break;\n\n        case \"date\":\n          if (!this.dateValidation(this.formFields[field].element)) {\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n            this.setFormValid(false);\n          }\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return this.getFormValid();\n  };\n}\n","const formFields = {\n  firstName: {\n    element: document.getElementById(\"first\"),\n    validationType: \"name\",\n    invalidMessage:\n      \"Veuillez entrer 2 caractères ou plus pour le champ du prénom.\",\n  },\n  lastName: {\n    element: document.getElementById(\"last\"),\n    validationType: \"name\",\n    invalidMessage:\n      \"Veuillez entrer 2 caractères ou plus pour le champ du nom.\",\n  },\n  email: {\n    element: document.getElementById(\"email\"),\n    validationType: \"email\",\n    invalidMessage: \"Veuillez entrer une adresse mail valide.\",\n  },\n  birthdate: {\n    element: document.getElementById(\"birthdate\"),\n    validationType: \"date\",\n    invalidMessage: \"Vous devez entrer votre date de naissance.\",\n  },\n  quantity: {\n    element: document.getElementById(\"quantity\"),\n    validationType: \"number\",\n    invalidMessage: \"Veuillez entrer un nombre.\",\n  },\n  location: {\n    element: document.querySelectorAll('input[name=\"location\"]'),\n    validationType: \"radio\",\n    invalidMessage: \"Veuillez selectionner une ville.\",\n  },\n  checkbox: {\n    element: document.getElementById(\"checkbox1\"),\n    validationType: \"checkbox\",\n    invalidMessage:\n      \"Vous devez vérifier que vous acceptez les termes et conditions.\",\n  },\n};\n\nconst fieldContainer = document.querySelectorAll(\".formData\");\n\nexport { formFields, fieldContainer };\n","import editNav from \"./nav.js\";\nimport Modal from \"./Class/Modal.js\";\nimport Validator from \"./Class/Validator.js\";\nimport { formFields, fieldContainer } from \"./formConfig.js\";\n\nwindow.editNav = editNav;\n\n// initialize modal\nModal.launchModalEvent();\n\nconst validator = new Validator(fieldContainer, formFields);\n\nconst formName = document.getElementsByName(\"reserve\")[0];\n\nformName.onsubmit = (event) => {\n  event.preventDefault();\n  console.log(\"Salut\");\n\n  if (validator.launchValidation()) {\n    formName.reset();\n    Modal.validation();\n  }\n};\n","export default function editNav() {\n  var topNav = document.getElementById(\"myTopnav\");\n  if (topNav.className === \"topnav\") {\n    topNav.className += \" responsive\";\n  } else {\n    topNav.className = \"topnav\";\n  }\n}\n"],"names":["Modal","modalbg","document","querySelector","modalBtn","querySelectorAll","closeBtn","closeConfirm","modalConfirm","form","getElementsByName","dom","forEach","btn","addEventListener","launchModal","closeModal","style","display","classList","remove","add","Validator","fieldContainer","formFields","state","name","test","value","email","number","radio","checked","checkbox","date","setFormValid","Array","from","map","field","dataset","errorVisible","input","invalidMessage","parentNode","setAttribute","resetValidation","validationType","nameValidation","element","invalidInputStyle","lastNameValidation","emailValidation","numberValidation","radioValidation","checkboxValidation","dateValidation","getFormValid","this","firstName","getElementById","lastName","birthdate","quantity","location","window","editNav","topNav","className","launchModalEvent","validator","formName","onsubmit","event","preventDefault","console","log","launchValidation","reset","validation"],"sourceRoot":""}